/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutHomeIndexImport } from './routes/_layout/home/index'
import { Route as LayoutHomeFamiliesIndexImport } from './routes/_layout/home/families/index'
import { Route as LayoutHomeFamiliesFamilyIdImport } from './routes/_layout/home/families/$familyId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutHomeIndexRoute = LayoutHomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHomeFamiliesIndexRoute = LayoutHomeFamiliesIndexImport.update({
  id: '/home/families/',
  path: '/home/families/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHomeFamiliesFamilyIdRoute = LayoutHomeFamiliesFamilyIdImport.update(
  {
    id: '/home/families/$familyId',
    path: '/home/families/$familyId',
    getParentRoute: () => LayoutRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/home/': {
      id: '/_layout/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof LayoutHomeIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/home/families/$familyId': {
      id: '/_layout/home/families/$familyId'
      path: '/home/families/$familyId'
      fullPath: '/home/families/$familyId'
      preLoaderRoute: typeof LayoutHomeFamiliesFamilyIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/home/families/': {
      id: '/_layout/home/families/'
      path: '/home/families'
      fullPath: '/home/families'
      preLoaderRoute: typeof LayoutHomeFamiliesIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutHomeIndexRoute: typeof LayoutHomeIndexRoute
  LayoutHomeFamiliesFamilyIdRoute: typeof LayoutHomeFamiliesFamilyIdRoute
  LayoutHomeFamiliesIndexRoute: typeof LayoutHomeFamiliesIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutHomeIndexRoute: LayoutHomeIndexRoute,
  LayoutHomeFamiliesFamilyIdRoute: LayoutHomeFamiliesFamilyIdRoute,
  LayoutHomeFamiliesIndexRoute: LayoutHomeFamiliesIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/home': typeof LayoutHomeIndexRoute
  '/home/families/$familyId': typeof LayoutHomeFamiliesFamilyIdRoute
  '/home/families': typeof LayoutHomeFamiliesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/home': typeof LayoutHomeIndexRoute
  '/home/families/$familyId': typeof LayoutHomeFamiliesFamilyIdRoute
  '/home/families': typeof LayoutHomeFamiliesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/_layout/home/': typeof LayoutHomeIndexRoute
  '/_layout/home/families/$familyId': typeof LayoutHomeFamiliesFamilyIdRoute
  '/_layout/home/families/': typeof LayoutHomeFamiliesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/home'
    | '/home/families/$familyId'
    | '/home/families'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/home'
    | '/home/families/$familyId'
    | '/home/families'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/about'
    | '/_layout/home/'
    | '/_layout/home/families/$familyId'
    | '/_layout/home/families/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  AboutRoute: typeof AboutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  AboutRoute: AboutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/home/",
        "/_layout/home/families/$familyId",
        "/_layout/home/families/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/_layout/home/": {
      "filePath": "_layout/home/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/home/families/$familyId": {
      "filePath": "_layout/home/families/$familyId.tsx",
      "parent": "/_layout"
    },
    "/_layout/home/families/": {
      "filePath": "_layout/home/families/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
